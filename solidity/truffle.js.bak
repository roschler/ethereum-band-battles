// Parse out the target network from the script arguments.
const argv = require('minimist')(process.argv);
var networkName = argv.network;

/** Dump the script arguments before and after parsing them with minimist.
 *
console.log('arguments: ');
console.log(process.argv);
console.log('arguments parsed: ');
console.log(argv);

var networkName = argv.network;
console.log('Target network: ' + networkName);
 */

var HDWalletProvider = require("truffle-hdwallet-provider");
var mnemonic = null;
var infuraApiKey = process.env.INFURA_API_KEY;
var urlRinkebyWithInfuraApiKey = "https://rinkeby.infura.io/" + infuraApiKey;
var urlRopstenWithInfuraApiKey = "https://ropsten.infura.io/" + infuraApiKey;
var truffleMigrateFrom = process.env.TRUFFLE_MIGRATE_FROM;
var accountNdx = -1;

// For Ganache, Use the environment value for the Ganache house public address.
var ganacheHousePublicAddr = process.env.GANACHE_HOUSE_PUBLIC_ADDRESS;

// console.log('Using migrate "from" address: ' + truffleMigrateFrom);

if (networkName == 'local')
{

	if (!ganacheHousePublicAddr)
	{
		let errMsg = 'The house public address is not set in the environment for the Ganache network (local).';
		console.log (errMsg);
		throw new Error(errMsg);
	}
	
	mnemonic = process.env.MNEMONIC_TEST_NETWORK_GANACHE;
}
else if (networkName == 'rinkeby')
{
	mnemonic = process.env.MNEMONIC_TEST_NETWORK_RINKEBY;
	accountNdx = 1;
}
else if (networkName == 'ropsten')
{
	mnemonic = process.env.MNEMONIC_TEST_NETWORK_ROPSTEN;
	accountNdx = 1;
}

if (mnemonic == null)
{
	let errMsg = 'The mnemonic is undefined for the target network.';
	console.log (errMsg);
	throw new Error(errMsg);
}

// Validate settings.
if (!mnemonic)
	throw new Error('The server side mnemonic is not set!');
if (!infuraApiKey)
	throw new Error('The Infura API key is not set!');
	
console.log('Deployment settings: ');
console.log('    Using MNEMONIC: ' + mnemonic);
if (networkName == 'local')
	console.log('    Using FROM address: ' + ganacheHousePublicAddr);
else
	console.log('    Using account index: ' + accountNdx.toString());
console.log('    Target network: ' + networkName);

// NOTE: The ropsten and rinkeby provider function calls used to have a '+' sign before
//  the account index.
module.exports = {
  networks: {
    local: {
      host: "127.0.0.1",
      port: 8545,
      from: ganacheHousePublicAddr,
      network_id: "*" // Match any network id
    },
  	/**
    local: {
      provider: function() {
        return new HDWalletProvider(
          mnemonic,
          '127.0.0.1:8545',
          accountNdx);
	  },
      network_id: "*" // Match any network id
    },
    */
    ropsten: {
      provider: function() {
        return new HDWalletProvider(
          mnemonic,
          urlRopstenWithInfuraApiKey,
          accountNdx);
	  },
	  network_id: 3
	},
    rinkeby: {
      provider: function() {
        return new HDWalletProvider(
          mnemonic,
          urlRinkebyWithInfuraApiKey,
          accountNdx);
	  },
	  network_id: 4
	}
  }
};
