#!/usr/bin/env node

/**
 * Web start file that supports SSL and listens for traffic on port 7300.
 */

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cryptobandbattles:server');

/**
 * Get port from environment and store in Express.  If not, use port 3000.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create the HTTPS server.
 */

var fs = require('fs');
var https = require('https');

// Get the location of the private key and fullchain files for SSL support
//  from the environment.
var privkeyPath = process.env.PRIVKEY_PATH;
var fullchainPath = process.env.FULLCHAIN_PATH;

// Validate them.
if (!fs.existsSync(privkeyPath))
	throw new Error("Invalid private key file path: " + privkeyPath);

if (!fs.existsSync(fullchainPath))
	throw new Error("Invalid fullchain file path: " + fullchainPath);

var options = {
	key: fs.readFileSync(privkeyPath),
	cert: fs.readFileSync(fullchainPath),
	requestCert: false,
	rejectUnauthorized: true
};

var server = https.createServer(options, app).listen(port, function(){
	console.log("Certificate enabled express server listening on port " + port);
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);
	
	if (isNaN(port)) {
		// named pipe
		return val;
	}
	
	if (port >= 0) {
		// port number
		return port;
	}
	
	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;
	
	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
		
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
		
	debug('Listening on ' + bind);
}
